openapi: "3.0.3"
info:
  version: 0.0.1
  title: Identity management service
  description: Web service which handling all calls related to Users
  contact:
    name: Taras Melnyk, Sviatoslav Gurlenko, Dmytro Rudoy
    email: taras.melnyk.aka.krimyllex@gmail.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
paths:
  /signup:
    post:
      description: This endpoint handles user registration requests, sent from sign-up form
      operationId: SignUp
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupRequest'
      responses:
        '200':
          description: Sign up request successful, to complete registration confirm your email with token
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /sessions:
    post:
      description: User login 
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successfull autorization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '400':
          description: Invalid email or password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /sessions/refresh:
    post:
      operationId: refreshToken
      description: Function that refreshes the token
      responses:
        '200':
          description: Token successfully refreshed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /email/available:
    get:
      description: This endpoint compares user's entered email with existing emails and displays an error if there is the same in DB
      operationId: EmailAvailable
      parameters:
        - in: query
          name: email
          schema:
            type: string
            format: email
          description: Compared email
      responses:
        '200':
          description: Email is not occupied
        '409':
          description: User with this email has already registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/emailVerificationToken/verify:
    get:
      description: To complete the registration you need to confirm your email with token
      operationId: EmailVerificationToken
      parameters:
        - in: query
          name: token
          schema:
            type: string
          description: Token that you need to complete the registration
      responses:
        '200':
          description: Registration completed
        default:
          description: User did not confirm his email
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users:
    get:
      description: Get all users
      operationId: GetAllUsers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      description: Creates a new user in the store.
      operationId: AddUser
      requestBody:
        description: User to add to the store
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Unprocessable entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/{UserID}:
    get:
      description: Get one user
      operationId: GetUser
      parameters:
        - name: UserID
          in: path
          description: ID of user to fetch
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      description: Updates an user in the store.
      operationId: UpdateUser
      parameters:
        - name: UserID
          in: path
          description: ID of user to fetch
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: User to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      description: deletes a single user based on the ID supplied
      operationId: DeleteUser
      parameters:
        - name: UserID
          in: path
          description: ID of user to delete
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: user deleted
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /password:
    post:
      description: This endpoint handles change password
      operationId: ChangePassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
      responses:
        '200':
          description:  Successful new password
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /resetpassword:
    put:
     description: This endpoint handles resetting the password
     operationId: ResetPassword
     requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
     responses:
        '200':
          description:  Successful new password
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    SignupRequest:
      type: object
      properties:
        firstName:
          type: string
          maxLength: 255
          minLength: 1
          description: User's first name
        lastName:
          type: string
          maxLength: 255
          minLength: 1
          description: User's last name
        email:
          type: string
          maxLength: 255
          format: email
          description: User's email
        password:
          type: string
          maxLength: 255
          minLength: 1
          format: password
          description: User's password
      required:
        - firstName
        - lastName
        - email
        - password
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: User's email
        password:
          type: string
          format: password
          description: User's password
    ChangePasswordRequest:
      type: object
      properties:
        email:
          type: string
          maxLength: 255
          format: email
          description: User's email
        existingPassword:
          type: string
          format: password
          description: User's password
        newPassword:
          type: string
          format: password
          description: User's new password
      required:
        - existingPassword
        - newPassword
        - email
    ResetPasswordRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
          description: User's email
    Token:
      type: object
      properties:
        token:
          type: string
      required:
       - token
    User:
      type: object
      required:
        - userId
        - firstName
        - lastName
        - email
        - mobilePhone
        - createdAt
        - modifiedAt
      properties:
        UserID:
          type: integer
          format: int32
          readOnly: true
        FirstName:
          type: string
          maxLength: 255
        LastName:
          type: string
          maxLength: 255
        Email:
          type: string
          format: email
          maxLength: 255
        MobilePhone:
          type: string
          maxLength: 255
        CreatedAt:
          type: string
          format: date-time
          readOnly: true
        ModifiedAt:
          type: string
          format: date-time
          readOnly: true
    Error:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
      required:
       - code
       - message
